#include <stdio.h>
#include <stdlib.h>

#define MAX 100

struct Edge {
    int src, dest, weight;
};

struct Graph {
    int V, E;
    struct Edge edges[MAX];
};

int parent[MAX];

int find(int i) {
    if(parent[i] == i) return i;
    return parent[i] = find(parent[i]);
}

void unionSet(int x, int y) {
    int xset = find(x);
    int yset = find(y);
    parent[xset] = yset;
}

int compare(const void* a, const void* b) {
    struct Edge* e1 = (struct Edge*)a;
    struct Edge* e2 = (struct Edge*)b;
    return e1->weight - e2->weight;
}

void kruskal(struct Graph* graph) {
    int V = graph->V;
    struct Edge result[V];
    int e = 0, i = 0;

    for(int v=0; v<V; v++) parent[v] = v;

    qsort(graph->edges, graph->E, sizeof(struct Edge), compare);

    while(e < V-1 && i < graph->E) {
        struct Edge next_edge = graph->edges[i++];
        int x = find(next_edge.src);
        int y = find(next_edge.dest);

        if(x != y) {
            result[e++] = next_edge;
            unionSet(x, y);
        }
    }

    printf("Edges in MST:\n");
    for(i=0; i<e; i++)
        printf("%d -- %d == %d\n", result[i].src, result[i].dest, result[i].weight);
}

int main() {
    struct Graph graph;
    printf("Enter number of vertices and edges: ");
    scanf("%d %d", &graph.V, &graph.E);

    printf("Enter edges (src dest weight):\n");
    for(int i=0; i<graph.E; i++) {
        scanf("%d %d %d", &graph.edges[i].src, &graph.edges[i].dest, &graph.edges[i].weight);
    }

    kruskal(&graph);
    return 0;
}
