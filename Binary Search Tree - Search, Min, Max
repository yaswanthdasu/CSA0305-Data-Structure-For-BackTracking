#include <stdio.h>
#include <stdlib.h>

struct Node {
    int key;
    struct Node *left, *right;
};

struct Node* newNode(int item) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}

struct Node* insert(struct Node* node, int key) {
    if(node == NULL) return newNode(key);
    if(key < node->key)
        node->left = insert(node->left, key);
    else if(key > node->key)
        node->right = insert(node->right, key);
    return node;
}

struct Node* search(struct Node* root, int key) {
    if(root == NULL || root->key == key) return root;
    if(key < root->key) return search(root->left, key);
    return search(root->right, key);
}

int findMin(struct Node* root) {
    while(root->left != NULL) root = root->left;
    return root->key;
}

int findMax(struct Node* root) {
    while(root->right != NULL) root = root->right;
    return root->key;
}

int main() {
    struct Node* root = NULL;
    int n, val, key;
    printf("Enter number of nodes: "); scanf("%d", &n);
    for(int i=0; i<n; i++) {
        printf("Enter value: "); scanf("%d", &val);
        root = insert(root, val);
    }

    printf("Enter key to search: "); scanf("%d", &key);
    struct Node* res = search(root, key);
    if(res) printf("Key found\n");
    else printf("Key not found\n");

    printf("Minimum element: %d\n", findMin(root));
    printf("Maximum element: %d\n", findMax(root));
    return 0;
}
